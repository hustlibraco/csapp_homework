我们在一个 int 类型为 32 位补码表示的机器上运行程序。float 类型的值使用 32
位 IEEE 格式，而 double 类型的值使用 64 位 IEEE 格式。

我们产生随机数 x、y 和 z，并且把它们转换成 double 类型的值：

/* Create some arbitrary values */
int x = random();
int y = random();
int z = random();

/* Convert to double */
double dx = (double)x;
double dy = (double)y;
double dz = (double)z;

对于下列的每个 C 表达式，你要指出表达式是否总是为 1。如果它总是为 1，描述其
中的数学原理。否则，列举出使它为 0 的参数的例子。请注意，不能使用 IA32 机器
运行 GCC 来测试你的答案，因为对于 float 和 double，它使用的都是 80 位的扩展
精度表示。

A. (double)(float)x == dx
   x = 2^25-1的时候，等式左边等于33554432，等式右边等于33554431。原因是int转float可能会舍入。

B. dx + dy == (double)(x+y)
   2*INT_MAX仍然在double类型的精确表示范围之内。所以该表达式总为1。

C. dx + dy + dz == dz + dy + dx
   浮点数加法不具有结合性，也就是说运算顺序不能随便改变。
   例如dx = 3.14, dy=1e100, dz=-1e100, 等式在左边为0，右边是3.14。
   不过这里dx,dy,dz都是int型强制转换来的，数值不会大到使double型发生舍入。
   根据B，dx+dy+dz = (double)(x+y+z), dz+dy+dx=(double)(z+y+x)，整数加法满足结合律交换律，所以这个表达式应为真。

D. dx * dy * dz == dz * dy * dx
   浮点数乘法虽然是可交换的，但是仍不具有结合性，结果和运算顺序也有关系。
   例如dx = 1e200, dy = 1e200, dz = 1e-200,等式左边是无穷大，等式右边是1e200。
   但同C所述，int型整数没有那么大的数值，所以该表达式也为真。

E. dx / dx == dy / dy
   dx = 0, dy = 1, 等式左边是未定义的值，右边是1，表达式为0。